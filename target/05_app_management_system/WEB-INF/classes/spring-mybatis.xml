<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:jdbc="http://www.springframework.org/schema/jdbc"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mybatis="http://mybatis.org/schema/mybatis-spring"
       xsi:schemaLocation="http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
     http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
     http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc.xsd
     http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
     http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
     http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring.xsd
     http://www.springframework.org/schema/tx https://www.springframework.org/schema/tx/spring-tx.xsd">
    <!--本配置文件是spring整合mybatis后的配置文件，可以将两个单独配置文件删除-->

    <!--原spring的配置-->
    <!--注解扫描,只扫描service和dao,controller交给mvc扫描管理-->
    <context:component-scan base-package="com.ww">
        <!--哪些注解不扫描-->
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>

    <!--业务层实现类对象使用注解方式-->
    <!--自动注入dao层实现类对象-->
    <!--配置事务管理器-->
    <bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>
    <!--配置事务通知-->
    <tx:advice id="serviceAdvisor" transaction-manager="txManager">
        <!--配置业务层方法事务管理属性-->
        <tx:attributes>
            <tx:method name="sel*" read-only="true" propagation="SUPPORTS"/>
            <tx:method name="add*" read-only="false" propagation="REQUIRED"/>
            <tx:method name="insert*" read-only="false" propagation="REQUIRED"/>
            <tx:method name="del*" read-only="false" propagation="REQUIRED"/>
            <tx:method name="update*" read-only="false" propagation="REQUIRED"/>
            <tx:method name="upt*" read-only="false" propagation="REQUIRED"/>
        </tx:attributes>
    </tx:advice>
    <!--配置aop-->

    <aop:config>
        <aop:advisor advice-ref="serviceAdvisor" pointcut="execution(* com.ww.service.impl.*Impl.*(..))"/>
    </aop:config>

    <!--mybatis相关配置-->
    <!--配置加载数据库配置文件-->
    <context:property-placeholder location="classpath:database.properties"/>
    <!--配置数据源-->
    <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName" value="${jdbc.mysql.driver}"/>
        <property name="url" value="${jdbc.mysql.url}"/>
        <property name="username" value="${jdbc.mysql.username}"/>
        <property name="password" value="${jdbc.mysql.password}"/>
    </bean>
    <!--配置sqlSessionFactory-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!--注入数据源-->
        <property name="dataSource" ref="dataSource"/>
        <!-- 可以指定加载mybatis配置文件(保留不常用的配置)-->
         <property name="configLocation" value="classpath:mybatis-config.xml"/>
        <!--可以在此处指定mapper文件位置-->
        <!-- <property name="mapperLocations" value="com/ww/mapepr/*.xml"/>-->
        <!--指定哪个包下类使用名称简写-->
        <!-- property name="typeAliasesPackage" value="com.ww.pojo"/>-->
    </bean>
    <!--
    mybatis获取mapper(dao)接口实现类是通过加载配置文件获取sqlsessionfactory
    再获取session,再得到mapper接口的代理对象mapper，
    spring整合mapper可通过两种方法得到mapper接口的实现类并存入spring容器
    -->
    <!--方式一：每个mapper接口单独配置,得到其实现类对象-->
    <!--    <bean class="org.mybatis.spring.mapper.MapperFactoryBean">-->
    <!--        &lt;!&ndash;指定mapper接口&ndash;&gt;-->
    <!--        <property name="mapperInterface" value="com.ww.ssm.mapper.AccountMapper"/>-->
    <!--        &lt;!&ndash;注入sessionfactory&ndash;&gt;-->
    <!--        <property name="sqlSessionFactory" ref="sqlSessionFactory"/>-->
    <!--    </bean>-->
    <!--方式二：mapperp批量扫描，
        会扫描出指定包下所有mapper接口，为其创建实现类对象
        并加入spring容器，其id是类名首字母小写，
        前提：*Mapper.java和*mapper.xml同包同路径
        此种方式仍需注入sqlSessionFactory,当只配置了一个factory时，可以不配置，会自动去
        spring容器中查找相应类型bean进行注入，如果配置了多个factory,必须指明注入哪个factory
        且注意此属性(sqlSessionFactoryBeanName)是beanName注入，并非bean引用
    -->
    <!--    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">-->
    <!--        &lt;!&ndash;如果扫描多个包，包名之间使用半角逗号隔开，不能使用通配符&ndash;&gt;-->
    <!--        <property name="basePackage" value="com.ww.mapper"/>-->
    <!--        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory1"/>-->
    <!--    </bean>-->

    <!-- 方式三：scan for mappers and let them be autowired -->
    <!--同样满足
        前提：*Mapper.java和*mapper.xml同包同路径
        此种方式仍需注入sqlSessionFactory,当只配置了一个factory时，可以不配置，会自动去
    -->
    <mybatis:scan base-package="com.ww.mapper"/>
</beans>